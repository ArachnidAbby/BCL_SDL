import SDL;
import stdlib;

struct Player {
    x: f64, y: f64,
    xv: f64, yv: f64;

    define update(&self, dt: f64, window_surface: &SDL_Surface) {
        SPEED = 200;
        self.x += self.xv*200*dt;
        self.y += self.yv*200*dt;

        if self.x > window_surface.w{
            self.x = 0;
        } else if self.x < 0 {
            self.x = window_surface.w;
        }

        if self.y > window_surface.h{
            self.y = 0;
        } else if self.y < 0 {
            self.y = window_surface.h;
        }
    }

    define draw(self, window_surface: &SDL_Surface) {
        WHITE = new_color(255, 255, 255);
        rect = SDL_Rect {x: (self.x as i32), y: (self.y as i32), w: 200, h: 200};
        SDL_FillRect(window_surface, &rect, WHITE);
    }
}

define main() -> i32 {
    if SDL_Init(32) < 0 {
        println("Failed to initialize sdl2");
        return -1;
    }

    window: &SDL_Window = SDL_CreateWindow("SDL2 Window",
                                          805240832,
                                          805240832,
                                          680, 480,
                                          0);

    window_surface: &SDL_Surface = SDL_GetWindowSurface(window);
    p = window_surface.w;
    println(p);

    WHITE = new_color(255, 255, 255);
    BLACK = 0;



    // SDL_Delay(10000);
    e = create_default_event();

    player = Player {x: 0 as f64, y: 0 as f64, yv: 0 as f64, xv: 0 as f64};
    quitted = false;
    frame_rate = 1000f/60f;
    start_frame = SDL_GetTicks();
    end_frame = SDL_GetTicks();
    delta = 0;

    while not quitted {
        start_frame = SDL_GetTicks();
        delta = start_frame - end_frame;
        while SDL_PollEvent(&e) > 0 {
            if e.type == SDL_QUIT() {
                quitted = true;
                break;
            } else if e.type == SDL_KEYDOWN() {
                // printf("%i %i\n", e.key().keysym.scancode, e.key().keysym.sym);
                k = e.key().keysym.sym;
                if k == 'd' as i32 {
                    player.xv = 1;
                } else if k == 'a' as i32 {
                    player.xv = -1;
                } else if k == ' ' as i32 {
                    player.xv = 0;
                    player.yv = 0;
                }
                if k == 'w' as i32 {
                    player.yv = -1;
                } else if k == 's' as i32 {
                    player.yv = 1;
                }
            }

            else if e.type == SDL_KEYUP() {
                // printf("%i %i\n", e.key().keysym.scancode, e.key().keysym.sym);
                k = e.key().keysym.sym;
                if k == 'd' as i32 and player.xv==1 {
                    player.xv = 0;
                } else if k == 'a' as i32 and player.xv==-1 {
                    player.xv = 0;
                }
                if k == 'w' as i32 and player.yv==-1 {
                    player.yv = 0;
                } else if k == 's' as i32  and player.yv==1 {
                    player.yv = 0;
                }
            }
        }

        if delta > frame_rate{
            dt = delta/(1000f as f64);
            player.update(dt, window_surface);
            SDL_FillScreen(window_surface, BLACK);
            player.draw(window_surface);
            SDL_UpdateWindowSurface(window);
            end_frame = start_frame;
        }
    }
    SDL_Quit();
    return 0;

}